package 第693题_交替位二进制数.解法5;

/**
 * @author lcl100
 * @create 2021-09-06 23:03
 */
public class Solution {

    /**
     * <p>思路：运算。交替0和1，移位后异或就可以全为1，再与自身加1后相与一定为0。</p>
     * <p>结果：成功</p>
     * <ul>
     *     <li>执执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户</li>
     *     <li>内存消耗：35.2 MB, 在所有 Java 提交中击败了62.39% 的用户</li>
     *     <li>通过测试用例：204 / 204</li>
     * </ul>
     *
     * @param n 十进制数字
     * @return 如果它的二进制数表示总是0、1交替出现则返回true
     */
    public boolean hasAlternatingBits(int n) {
        /*
            例如：n=4
                第一步，n = (n ^ (n >> 1));
                n=(100 ^ (100 >> 1))=(100 ^ 010)=110
                第二步，(n & (n + 1))==0
                (110 & (110+1))=(110 & 111)=110!=0
           例如：n=5
                第一步，n = (n ^ (n >> 1));
                n=(101 ^ (101 >> 1))=(101 ^ 010)=111
                第二步，(n & (n + 1))==0
                (111 & (111+1))=(0111 & 1000)=0
         */
        n = (n ^ (n >> 1));
        return (n & (n + 1)) == 0;
    }
}